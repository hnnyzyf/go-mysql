package myast

//定义一个Node，定义vistor访问方式，该Node可以接受vistor，vistor会遍历这个节点
type Node interface {
	Accept(v Visitor)
}

//实现walk为vistor，该vistor对当前的Node进行处理，给出我们想要的操作
type Visitor interface {
	Walk(n Node)
}

//实现StmtNode接口
type StmtNode interface {
	Node
	IsStmt()
}

type StmtType int

const (
	_ StmtType = iota
	AST_SELECT
	AST_UPDATE
	AST_DELETE
	AST_INSERT
)

//定义表达式接口,需要实现Accpet接口
type ExprNode interface {
	Node
	IsExprNode()
}

//初始化一个list

type NodeType int

const (
	_ NodeType = iota

	CLAUSE_DISTINCT
	CLAUSE_TARGET
	CLAUSE_INTO
	CLAUSE_FROM
	CLAUSE_WHERE
	CLAUSE_GROUPBY
	CLAUSE_HAVING
	CLAUSE_SORTBY
	CLAUSE_LOCK
	CLAUSE_LIMIT

	EXPR_BOOL
	EXPR_BOOL_PLUS
	EXPR_BOOL_MINUS
	EXPR_BOOL_MULTIPLY
	EXPR_BOOL_DIVIDE
	EXPR_BOOL_REMAINDER
	EXPR_BOOL_XOR
	EXPR_BOOL_L
	EXPR_BOOL_G
	EXPR_BOOL_E
	EXPR_BOOL_LEG
	EXPR_BOOL_IE
	EXPR_BOOL_NE
	EXPR_BOOL_LE
	EXPR_BOOL_GE
	EXPR_BOOL_AA
	EXPR_BOOL_OO
	EXPR_BOOL_SL
	EXPR_BOOL_SR
	EXPR_BOOL_AND
	EXPR_BOOL_OR
	EXPR_BOOL_NOT
	EXPR_BOOL_LIKE
	EXPR_BOOL_NOT_LIKE

	EXPR_NULL
	EXPR_TRUE
	EXPR_FALSE

	EXPR_RANGE

	EXPR_IN_SIMPLE
	EXPR_IN_SUBLINK

	EXPR_SUBQUERY
	EXPR_SUBQUERY_EXISTS
	EXPR_SUBQUERY_ANY
	EXPR_SUBQUERY_SOME
	EXPR_SUBQUERY_ALL

	EXPR_SUBLINK

	EXPR_JOIN
	EXPR_JOIN_CROSS
	EXPR_JOIN_LEFT
	EXPR_JOIN_RIGHT
	EXPR_JOIN_INNER
	EXPR_JOIN_NATURAL
	EXPR_JOIN_NATURAL_LEFT
	EXPR_JOIN_NATURAL_RIGHT
	EXPR_JOIN_NATURAL_INNER
	EXPR_JOIN_ON
	EXPR_JOIN_USING

	EXPR_FUNC
	EXPR_FUNC_ARG

	EXPR_CASE
	EXPR_CASE_WHEN
	EXPR_CASE_ELSE

	VALUE_TARGET
	VALUE_COLUMN
	VALUE_TABLE_SIMPLE
	VALUE_TABLE_SUBTABLE
	VALUE_STRING
	VALUE_IDENT
	VALUE_NUMBER
	VALUE_STAR
	VALUE_SORTBY_ITEM
)
